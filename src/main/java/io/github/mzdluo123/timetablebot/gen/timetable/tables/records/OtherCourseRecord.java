/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables.records;


import io.github.mzdluo123.timetablebot.gen.timetable.tables.OtherCourse;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OtherCourseRecord extends UpdatableRecordImpl<OtherCourseRecord> implements Record4<Integer, String, Double, Byte> {

    private static final long serialVersionUID = -12550066;

    /**
     * Setter for <code>timetable.other_course.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>timetable.other_course.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>timetable.other_course.name</code>. 课程名字
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>timetable.other_course.name</code>. 课程名字
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>timetable.other_course.score</code>. 学分
     */
    public void setScore(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>timetable.other_course.score</code>. 学分
     */
    public Double getScore() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>timetable.other_course.week</code>. 第几周
     */
    public void setWeek(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>timetable.other_course.week</code>. 第几周
     */
    public Byte getWeek() {
        return (Byte) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Double, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Double, Byte> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return OtherCourse.OTHER_COURSE.ID;
    }

    @Override
    public Field<String> field2() {
        return OtherCourse.OTHER_COURSE.NAME;
    }

    @Override
    public Field<Double> field3() {
        return OtherCourse.OTHER_COURSE.SCORE;
    }

    @Override
    public Field<Byte> field4() {
        return OtherCourse.OTHER_COURSE.WEEK;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Double component3() {
        return getScore();
    }

    @Override
    public Byte component4() {
        return getWeek();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Double value3() {
        return getScore();
    }

    @Override
    public Byte value4() {
        return getWeek();
    }

    @Override
    public OtherCourseRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public OtherCourseRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public OtherCourseRecord value3(Double value) {
        setScore(value);
        return this;
    }

    @Override
    public OtherCourseRecord value4(Byte value) {
        setWeek(value);
        return this;
    }

    @Override
    public OtherCourseRecord values(Integer value1, String value2, Double value3, Byte value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OtherCourseRecord
     */
    public OtherCourseRecord() {
        super(OtherCourse.OTHER_COURSE);
    }

    /**
     * Create a detached, initialised OtherCourseRecord
     */
    public OtherCourseRecord(Integer id, String name, Double score, Byte week) {
        super(OtherCourse.OTHER_COURSE);

        set(0, id);
        set(1, name);
        set(2, score);
        set(3, week);
    }
}
