/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.information_schema.tables;


import io.github.mzdluo123.timetablebot.gen.information_schema.InformationSchema;
import io.github.mzdluo123.timetablebot.gen.information_schema.tables.records.GeometryColumnsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeometryColumns extends TableImpl<GeometryColumnsRecord> {

    private static final long serialVersionUID = -1643019211;

    /**
     * The reference instance of <code>information_schema.GEOMETRY_COLUMNS</code>
     */
    public static final GeometryColumns GEOMETRY_COLUMNS = new GeometryColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeometryColumnsRecord> getRecordType() {
        return GeometryColumnsRecord.class;
    }

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.F_TABLE_CATALOG</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_TABLE_CATALOG = createField(DSL.name("F_TABLE_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.F_TABLE_SCHEMA</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_TABLE_SCHEMA = createField(DSL.name("F_TABLE_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.F_TABLE_NAME</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_TABLE_NAME = createField(DSL.name("F_TABLE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.F_GEOMETRY_COLUMN</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_GEOMETRY_COLUMN = createField(DSL.name("F_GEOMETRY_COLUMN"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.G_TABLE_CATALOG</code>.
     */
    public final TableField<GeometryColumnsRecord, String> G_TABLE_CATALOG = createField(DSL.name("G_TABLE_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.G_TABLE_SCHEMA</code>.
     */
    public final TableField<GeometryColumnsRecord, String> G_TABLE_SCHEMA = createField(DSL.name("G_TABLE_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.G_TABLE_NAME</code>.
     */
    public final TableField<GeometryColumnsRecord, String> G_TABLE_NAME = createField(DSL.name("G_TABLE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.G_GEOMETRY_COLUMN</code>.
     */
    public final TableField<GeometryColumnsRecord, String> G_GEOMETRY_COLUMN = createField(DSL.name("G_GEOMETRY_COLUMN"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.STORAGE_TYPE</code>.
     */
    public final TableField<GeometryColumnsRecord, Byte> STORAGE_TYPE = createField(DSL.name("STORAGE_TYPE"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.GEOMETRY_TYPE</code>.
     */
    public final TableField<GeometryColumnsRecord, Integer> GEOMETRY_TYPE = createField(DSL.name("GEOMETRY_TYPE"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.COORD_DIMENSION</code>.
     */
    public final TableField<GeometryColumnsRecord, Byte> COORD_DIMENSION = createField(DSL.name("COORD_DIMENSION"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.MAX_PPR</code>.
     */
    public final TableField<GeometryColumnsRecord, Byte> MAX_PPR = createField(DSL.name("MAX_PPR"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>information_schema.GEOMETRY_COLUMNS.SRID</code>.
     */
    public final TableField<GeometryColumnsRecord, Short> SRID = createField(DSL.name("SRID"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>information_schema.GEOMETRY_COLUMNS</code> table reference
     */
    public GeometryColumns() {
        this(DSL.name("GEOMETRY_COLUMNS"), null);
    }

    /**
     * Create an aliased <code>information_schema.GEOMETRY_COLUMNS</code> table reference
     */
    public GeometryColumns(String alias) {
        this(DSL.name(alias), GEOMETRY_COLUMNS);
    }

    /**
     * Create an aliased <code>information_schema.GEOMETRY_COLUMNS</code> table reference
     */
    public GeometryColumns(Name alias) {
        this(alias, GEOMETRY_COLUMNS);
    }

    private GeometryColumns(Name alias, Table<GeometryColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private GeometryColumns(Name alias, Table<GeometryColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> GeometryColumns(Table<O> child, ForeignKey<O, GeometryColumnsRecord> key) {
        super(child, key, GEOMETRY_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public GeometryColumns as(String alias) {
        return new GeometryColumns(DSL.name(alias), this);
    }

    @Override
    public GeometryColumns as(Name alias) {
        return new GeometryColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GeometryColumns rename(String name) {
        return new GeometryColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GeometryColumns rename(Name name) {
        return new GeometryColumns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, String, String, String, String, String, String, Byte, Integer, Byte, Byte, Short> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
