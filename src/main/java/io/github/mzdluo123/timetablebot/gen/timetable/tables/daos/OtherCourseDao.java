/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables.daos;


import io.github.mzdluo123.timetablebot.gen.timetable.tables.OtherCourse;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.OtherCourseRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OtherCourseDao extends DAOImpl<OtherCourseRecord, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse, Integer> {

    /**
     * Create a new OtherCourseDao without any configuration
     */
    public OtherCourseDao() {
        super(OtherCourse.OTHER_COURSE, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse.class);
    }

    /**
     * Create a new OtherCourseDao with an attached configuration
     */
    public OtherCourseDao(Configuration configuration) {
        super(OtherCourse.OTHER_COURSE, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse.class, configuration);
    }

    @Override
    public Integer getId(io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(OtherCourse.OTHER_COURSE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse> fetchById(Integer... values) {
        return fetch(OtherCourse.OTHER_COURSE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse fetchOneById(Integer value) {
        return fetchOne(OtherCourse.OTHER_COURSE.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(OtherCourse.OTHER_COURSE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse> fetchByName(String... values) {
        return fetch(OtherCourse.OTHER_COURSE.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse fetchOneByName(String value) {
        return fetchOne(OtherCourse.OTHER_COURSE.NAME, value);
    }

    /**
     * Fetch records that have <code>score BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse> fetchRangeOfScore(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(OtherCourse.OTHER_COURSE.SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>score IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse> fetchByScore(Double... values) {
        return fetch(OtherCourse.OTHER_COURSE.SCORE, values);
    }

    /**
     * Fetch records that have <code>week BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse> fetchRangeOfWeek(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(OtherCourse.OTHER_COURSE.WEEK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>week IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.OtherCourse> fetchByWeek(Byte... values) {
        return fetch(OtherCourse.OTHER_COURSE.WEEK, values);
    }
}
