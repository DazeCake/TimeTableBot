/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables;


import io.github.mzdluo123.timetablebot.gen.timetable.Indexes;
import io.github.mzdluo123.timetablebot.gen.timetable.Keys;
import io.github.mzdluo123.timetablebot.gen.timetable.Timetable;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.CoursetimeRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Coursetime extends TableImpl<CoursetimeRecord> {

    private static final long serialVersionUID = 1248657120;

    /**
     * The reference instance of <code>timetable.coursetime</code>
     */
    public static final Coursetime COURSETIME = new Coursetime();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoursetimeRecord> getRecordType() {
        return CoursetimeRecord.class;
    }

    /**
     * The column <code>timetable.coursetime.id</code>.
     */
    public final TableField<CoursetimeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>timetable.coursetime.course</code>.
     */
    public final TableField<CoursetimeRecord, Integer> COURSE = createField(DSL.name("course"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>timetable.coursetime.class_room</code>.
     */
    public final TableField<CoursetimeRecord, Integer> CLASS_ROOM = createField(DSL.name("class_room"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>timetable.coursetime.day_of_week</code>.
     */
    public final TableField<CoursetimeRecord, String> DAY_OF_WEEK = createField(DSL.name("day_of_week"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>timetable.coursetime.week</code>.
     */
    public final TableField<CoursetimeRecord, String> WEEK = createField(DSL.name("week"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>timetable.coursetime.start_time</code>.
     */
    public final TableField<CoursetimeRecord, Short> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>timetable.coursetime.length</code>.
     */
    public final TableField<CoursetimeRecord, Short> LENGTH = createField(DSL.name("length"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>timetable.coursetime</code> table reference
     */
    public Coursetime() {
        this(DSL.name("coursetime"), null);
    }

    /**
     * Create an aliased <code>timetable.coursetime</code> table reference
     */
    public Coursetime(String alias) {
        this(DSL.name(alias), COURSETIME);
    }

    /**
     * Create an aliased <code>timetable.coursetime</code> table reference
     */
    public Coursetime(Name alias) {
        this(alias, COURSETIME);
    }

    private Coursetime(Name alias, Table<CoursetimeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Coursetime(Name alias, Table<CoursetimeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Coursetime(Table<O> child, ForeignKey<O, CoursetimeRecord> key) {
        super(child, key, COURSETIME);
    }

    @Override
    public Schema getSchema() {
        return Timetable.TIMETABLE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COURSETIME_COURSETIME_CLASS_ROOM, Indexes.COURSETIME_COURSETIME_COURSE, Indexes.COURSETIME_COURSETIME_DAY_OF_WEEK, Indexes.COURSETIME_COURSETIME_LENGTH, Indexes.COURSETIME_COURSETIME_START_TIME, Indexes.COURSETIME_COURSETIME_WEEK);
    }

    @Override
    public Identity<CoursetimeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COURSETIME;
    }

    @Override
    public UniqueKey<CoursetimeRecord> getPrimaryKey() {
        return Keys.KEY_COURSETIME_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoursetimeRecord>> getKeys() {
        return Arrays.<UniqueKey<CoursetimeRecord>>asList(Keys.KEY_COURSETIME_PRIMARY);
    }

    @Override
    public List<ForeignKey<CoursetimeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CoursetimeRecord, ?>>asList(Keys.FK_COURSETIME_COURSE_ID, Keys.FK_COURSETIME_CLASS_ROOM_ID);
    }

    public Course course() {
        return new Course(this, Keys.FK_COURSETIME_COURSE_ID);
    }

    public Classroom classroom() {
        return new Classroom(this, Keys.FK_COURSETIME_CLASS_ROOM_ID);
    }

    @Override
    public Coursetime as(String alias) {
        return new Coursetime(DSL.name(alias), this);
    }

    @Override
    public Coursetime as(Name alias) {
        return new Coursetime(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Coursetime rename(String name) {
        return new Coursetime(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Coursetime rename(Name name) {
        return new Coursetime(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, String, String, Short, Short> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
