/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables;


import io.github.mzdluo123.timetablebot.gen.timetable.Indexes;
import io.github.mzdluo123.timetablebot.gen.timetable.Keys;
import io.github.mzdluo123.timetablebot.gen.timetable.Timetable;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.OtherCourseRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OtherCourse extends TableImpl<OtherCourseRecord> {

    private static final long serialVersionUID = -767048424;

    /**
     * The reference instance of <code>timetable.other_course</code>
     */
    public static final OtherCourse OTHER_COURSE = new OtherCourse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtherCourseRecord> getRecordType() {
        return OtherCourseRecord.class;
    }

    /**
     * The column <code>timetable.other_course.id</code>.
     */
    public final TableField<OtherCourseRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>timetable.other_course.name</code>. 课程名字
     */
    public final TableField<OtherCourseRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "课程名字");

    /**
     * The column <code>timetable.other_course.score</code>. 学分
     */
    public final TableField<OtherCourseRecord, Double> SCORE = createField(DSL.name("score"), org.jooq.impl.SQLDataType.FLOAT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.FLOAT)), this, "学分");

    /**
     * The column <code>timetable.other_course.week</code>. 第几周
     */
    public final TableField<OtherCourseRecord, Byte> WEEK = createField(DSL.name("week"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TINYINT)), this, "第几周");

    /**
     * The column <code>timetable.other_course.teacher</code>. 老师
     */
    public final TableField<OtherCourseRecord, String> TEACHER = createField(DSL.name("teacher"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "老师");

    /**
     * Create a <code>timetable.other_course</code> table reference
     */
    public OtherCourse() {
        this(DSL.name("other_course"), null);
    }

    /**
     * Create an aliased <code>timetable.other_course</code> table reference
     */
    public OtherCourse(String alias) {
        this(DSL.name(alias), OTHER_COURSE);
    }

    /**
     * Create an aliased <code>timetable.other_course</code> table reference
     */
    public OtherCourse(Name alias) {
        this(alias, OTHER_COURSE);
    }

    private OtherCourse(Name alias, Table<OtherCourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private OtherCourse(Name alias, Table<OtherCourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OtherCourse(Table<O> child, ForeignKey<O, OtherCourseRecord> key) {
        super(child, key, OTHER_COURSE);
    }

    @Override
    public Schema getSchema() {
        return Timetable.TIMETABLE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OTHER_COURSE_WEEK);
    }

    @Override
    public Identity<OtherCourseRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OTHER_COURSE;
    }

    @Override
    public UniqueKey<OtherCourseRecord> getPrimaryKey() {
        return Keys.KEY_OTHER_COURSE_PRIMARY;
    }

    @Override
    public List<UniqueKey<OtherCourseRecord>> getKeys() {
        return Arrays.<UniqueKey<OtherCourseRecord>>asList(Keys.KEY_OTHER_COURSE_PRIMARY, Keys.KEY_OTHER_COURSE_NAME);
    }

    @Override
    public OtherCourse as(String alias) {
        return new OtherCourse(DSL.name(alias), this);
    }

    @Override
    public OtherCourse as(Name alias) {
        return new OtherCourse(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OtherCourse rename(String name) {
        return new OtherCourse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtherCourse rename(Name name) {
        return new OtherCourse(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Double, Byte, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
