/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.information_schema.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTablespacesScrubbing implements Serializable {

    private static final long serialVersionUID = -845356532;

    private ULong         space;
    private String        name;
    private UInteger      compressed;
    private LocalDateTime lastScrubCompleted;
    private LocalDateTime currentScrubStarted;
    private UInteger      currentScrubActiveThreads;
    private ULong         currentScrubPageNumber;
    private ULong         currentScrubMaxPageNumber;
    private UInteger      onSsd;

    public InnodbTablespacesScrubbing() {}

    public InnodbTablespacesScrubbing(InnodbTablespacesScrubbing value) {
        this.space = value.space;
        this.name = value.name;
        this.compressed = value.compressed;
        this.lastScrubCompleted = value.lastScrubCompleted;
        this.currentScrubStarted = value.currentScrubStarted;
        this.currentScrubActiveThreads = value.currentScrubActiveThreads;
        this.currentScrubPageNumber = value.currentScrubPageNumber;
        this.currentScrubMaxPageNumber = value.currentScrubMaxPageNumber;
        this.onSsd = value.onSsd;
    }

    public InnodbTablespacesScrubbing(
        ULong         space,
        String        name,
        UInteger      compressed,
        LocalDateTime lastScrubCompleted,
        LocalDateTime currentScrubStarted,
        UInteger      currentScrubActiveThreads,
        ULong         currentScrubPageNumber,
        ULong         currentScrubMaxPageNumber,
        UInteger      onSsd
    ) {
        this.space = space;
        this.name = name;
        this.compressed = compressed;
        this.lastScrubCompleted = lastScrubCompleted;
        this.currentScrubStarted = currentScrubStarted;
        this.currentScrubActiveThreads = currentScrubActiveThreads;
        this.currentScrubPageNumber = currentScrubPageNumber;
        this.currentScrubMaxPageNumber = currentScrubMaxPageNumber;
        this.onSsd = onSsd;
    }

    public ULong getSpace() {
        return this.space;
    }

    public void setSpace(ULong space) {
        this.space = space;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public UInteger getCompressed() {
        return this.compressed;
    }

    public void setCompressed(UInteger compressed) {
        this.compressed = compressed;
    }

    public LocalDateTime getLastScrubCompleted() {
        return this.lastScrubCompleted;
    }

    public void setLastScrubCompleted(LocalDateTime lastScrubCompleted) {
        this.lastScrubCompleted = lastScrubCompleted;
    }

    public LocalDateTime getCurrentScrubStarted() {
        return this.currentScrubStarted;
    }

    public void setCurrentScrubStarted(LocalDateTime currentScrubStarted) {
        this.currentScrubStarted = currentScrubStarted;
    }

    public UInteger getCurrentScrubActiveThreads() {
        return this.currentScrubActiveThreads;
    }

    public void setCurrentScrubActiveThreads(UInteger currentScrubActiveThreads) {
        this.currentScrubActiveThreads = currentScrubActiveThreads;
    }

    public ULong getCurrentScrubPageNumber() {
        return this.currentScrubPageNumber;
    }

    public void setCurrentScrubPageNumber(ULong currentScrubPageNumber) {
        this.currentScrubPageNumber = currentScrubPageNumber;
    }

    public ULong getCurrentScrubMaxPageNumber() {
        return this.currentScrubMaxPageNumber;
    }

    public void setCurrentScrubMaxPageNumber(ULong currentScrubMaxPageNumber) {
        this.currentScrubMaxPageNumber = currentScrubMaxPageNumber;
    }

    public UInteger getOnSsd() {
        return this.onSsd;
    }

    public void setOnSsd(UInteger onSsd) {
        this.onSsd = onSsd;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InnodbTablespacesScrubbing (");

        sb.append(space);
        sb.append(", ").append(name);
        sb.append(", ").append(compressed);
        sb.append(", ").append(lastScrubCompleted);
        sb.append(", ").append(currentScrubStarted);
        sb.append(", ").append(currentScrubActiveThreads);
        sb.append(", ").append(currentScrubPageNumber);
        sb.append(", ").append(currentScrubMaxPageNumber);
        sb.append(", ").append(onSsd);

        sb.append(")");
        return sb.toString();
    }
}
