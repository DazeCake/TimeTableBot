/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables.daos;


import io.github.mzdluo123.timetablebot.gen.timetable.tables.CourseTime;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.CourseTimeRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CourseTimeDao extends DAOImpl<CourseTimeRecord, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime, Integer> {

    /**
     * Create a new CourseTimeDao without any configuration
     */
    public CourseTimeDao() {
        super(CourseTime.COURSE_TIME, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime.class);
    }

    /**
     * Create a new CourseTimeDao with an attached configuration
     */
    public CourseTimeDao(Configuration configuration) {
        super(CourseTime.COURSE_TIME, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime.class, configuration);
    }

    @Override
    public Integer getId(io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CourseTime.COURSE_TIME.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchById(Integer... values) {
        return fetch(CourseTime.COURSE_TIME.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime fetchOneById(Integer value) {
        return fetchOne(CourseTime.COURSE_TIME.ID, value);
    }

    /**
     * Fetch records that have <code>course BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchRangeOfCourse(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CourseTime.COURSE_TIME.COURSE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>course IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchByCourse(Integer... values) {
        return fetch(CourseTime.COURSE_TIME.COURSE, values);
    }

    /**
     * Fetch records that have <code>class_room BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchRangeOfClassRoom(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CourseTime.COURSE_TIME.CLASS_ROOM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>class_room IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchByClassRoom(Integer... values) {
        return fetch(CourseTime.COURSE_TIME.CLASS_ROOM, values);
    }

    /**
     * Fetch records that have <code>day_of_week BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchRangeOfDayOfWeek(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(CourseTime.COURSE_TIME.DAY_OF_WEEK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>day_of_week IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchByDayOfWeek(Byte... values) {
        return fetch(CourseTime.COURSE_TIME.DAY_OF_WEEK, values);
    }

    /**
     * Fetch records that have <code>week BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchRangeOfWeek(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(CourseTime.COURSE_TIME.WEEK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>week IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchByWeek(Byte... values) {
        return fetch(CourseTime.COURSE_TIME.WEEK, values);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchRangeOfStartTime(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(CourseTime.COURSE_TIME.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchByStartTime(Byte... values) {
        return fetch(CourseTime.COURSE_TIME.START_TIME, values);
    }

    /**
     * Fetch records that have <code>length BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchRangeOfLength(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(CourseTime.COURSE_TIME.LENGTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>length IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.CourseTime> fetchByLength(Byte... values) {
        return fetch(CourseTime.COURSE_TIME.LENGTH, values);
    }
}
