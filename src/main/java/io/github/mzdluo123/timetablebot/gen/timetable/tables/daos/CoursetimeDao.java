/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables.daos;


import io.github.mzdluo123.timetablebot.gen.timetable.tables.Coursetime;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.CoursetimeRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoursetimeDao extends DAOImpl<CoursetimeRecord, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime, Integer> {

    /**
     * Create a new CoursetimeDao without any configuration
     */
    public CoursetimeDao() {
        super(Coursetime.COURSETIME, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime.class);
    }

    /**
     * Create a new CoursetimeDao with an attached configuration
     */
    public CoursetimeDao(Configuration configuration) {
        super(Coursetime.COURSETIME, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime.class, configuration);
    }

    @Override
    public Integer getId(io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Coursetime.COURSETIME.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchById(Integer... values) {
        return fetch(Coursetime.COURSETIME.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime fetchOneById(Integer value) {
        return fetchOne(Coursetime.COURSETIME.ID, value);
    }

    /**
     * Fetch records that have <code>course BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchRangeOfCourse(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Coursetime.COURSETIME.COURSE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>course IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchByCourse(Integer... values) {
        return fetch(Coursetime.COURSETIME.COURSE, values);
    }

    /**
     * Fetch records that have <code>class_room BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchRangeOfClassRoom(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Coursetime.COURSETIME.CLASS_ROOM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>class_room IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchByClassRoom(Integer... values) {
        return fetch(Coursetime.COURSETIME.CLASS_ROOM, values);
    }

    /**
     * Fetch records that have <code>day_of_week BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchRangeOfDayOfWeek(String lowerInclusive, String upperInclusive) {
        return fetchRange(Coursetime.COURSETIME.DAY_OF_WEEK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>day_of_week IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchByDayOfWeek(String... values) {
        return fetch(Coursetime.COURSETIME.DAY_OF_WEEK, values);
    }

    /**
     * Fetch records that have <code>week BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchRangeOfWeek(String lowerInclusive, String upperInclusive) {
        return fetchRange(Coursetime.COURSETIME.WEEK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>week IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchByWeek(String... values) {
        return fetch(Coursetime.COURSETIME.WEEK, values);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchRangeOfStartTime(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(Coursetime.COURSETIME.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchByStartTime(Short... values) {
        return fetch(Coursetime.COURSETIME.START_TIME, values);
    }

    /**
     * Fetch records that have <code>length BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchRangeOfLength(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(Coursetime.COURSETIME.LENGTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>length IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Coursetime> fetchByLength(Short... values) {
        return fetch(Coursetime.COURSETIME.LENGTH, values);
    }
}
