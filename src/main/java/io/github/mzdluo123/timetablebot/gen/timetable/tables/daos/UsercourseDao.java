/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables.daos;


import io.github.mzdluo123.timetablebot.gen.timetable.tables.Usercourse;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.UsercourseRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsercourseDao extends DAOImpl<UsercourseRecord, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse, Integer> {

    /**
     * Create a new UsercourseDao without any configuration
     */
    public UsercourseDao() {
        super(Usercourse.USERCOURSE, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse.class);
    }

    /**
     * Create a new UsercourseDao with an attached configuration
     */
    public UsercourseDao(Configuration configuration) {
        super(Usercourse.USERCOURSE, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse.class, configuration);
    }

    @Override
    public Integer getId(io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Usercourse.USERCOURSE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse> fetchById(Integer... values) {
        return fetch(Usercourse.USERCOURSE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse fetchOneById(Integer value) {
        return fetchOne(Usercourse.USERCOURSE.ID, value);
    }

    /**
     * Fetch records that have <code>user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse> fetchRangeOfUser(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Usercourse.USERCOURSE.USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse> fetchByUser(Integer... values) {
        return fetch(Usercourse.USERCOURSE.USER, values);
    }

    /**
     * Fetch records that have <code>course BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse> fetchRangeOfCourse(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Usercourse.USERCOURSE.COURSE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>course IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.Usercourse> fetchByCourse(Integer... values) {
        return fetch(Usercourse.USERCOURSE.COURSE, values);
    }
}
