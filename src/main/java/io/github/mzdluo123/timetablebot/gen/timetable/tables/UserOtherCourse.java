/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables;


import io.github.mzdluo123.timetablebot.gen.timetable.Keys;
import io.github.mzdluo123.timetablebot.gen.timetable.Timetable;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.UserOtherCourseRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserOtherCourse extends TableImpl<UserOtherCourseRecord> {

    private static final long serialVersionUID = -690827444;

    /**
     * The reference instance of <code>timetable.user_other_course</code>
     */
    public static final UserOtherCourse USER_OTHER_COURSE = new UserOtherCourse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserOtherCourseRecord> getRecordType() {
        return UserOtherCourseRecord.class;
    }

    /**
     * The column <code>timetable.user_other_course.id</code>.
     */
    public final TableField<UserOtherCourseRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>timetable.user_other_course.user</code>.
     */
    public final TableField<UserOtherCourseRecord, Integer> USER = createField(DSL.name("user"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>timetable.user_other_course.other_course</code>.
     */
    public final TableField<UserOtherCourseRecord, Integer> OTHER_COURSE = createField(DSL.name("other_course"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>timetable.user_other_course</code> table reference
     */
    public UserOtherCourse() {
        this(DSL.name("user_other_course"), null);
    }

    /**
     * Create an aliased <code>timetable.user_other_course</code> table reference
     */
    public UserOtherCourse(String alias) {
        this(DSL.name(alias), USER_OTHER_COURSE);
    }

    /**
     * Create an aliased <code>timetable.user_other_course</code> table reference
     */
    public UserOtherCourse(Name alias) {
        this(alias, USER_OTHER_COURSE);
    }

    private UserOtherCourse(Name alias, Table<UserOtherCourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserOtherCourse(Name alias, Table<UserOtherCourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserOtherCourse(Table<O> child, ForeignKey<O, UserOtherCourseRecord> key) {
        super(child, key, USER_OTHER_COURSE);
    }

    @Override
    public Schema getSchema() {
        return Timetable.TIMETABLE;
    }

    @Override
    public UniqueKey<UserOtherCourseRecord> getPrimaryKey() {
        return Keys.KEY_USER_OTHER_COURSE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserOtherCourseRecord>> getKeys() {
        return Arrays.<UniqueKey<UserOtherCourseRecord>>asList(Keys.KEY_USER_OTHER_COURSE_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserOtherCourseRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserOtherCourseRecord, ?>>asList(Keys.FK_USER_OTHER_COURSE, Keys.PF_OTHER_COURSE);
    }

    public User user() {
        return new User(this, Keys.FK_USER_OTHER_COURSE);
    }

    public OtherCourse otherCourse() {
        return new OtherCourse(this, Keys.PF_OTHER_COURSE);
    }

    @Override
    public UserOtherCourse as(String alias) {
        return new UserOtherCourse(DSL.name(alias), this);
    }

    @Override
    public UserOtherCourse as(Name alias) {
        return new UserOtherCourse(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOtherCourse rename(String name) {
        return new UserOtherCourse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOtherCourse rename(Name name) {
        return new UserOtherCourse(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
