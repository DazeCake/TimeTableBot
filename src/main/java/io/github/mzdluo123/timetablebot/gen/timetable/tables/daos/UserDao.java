/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables.daos;


import io.github.mzdluo123.timetablebot.gen.timetable.tables.User;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.UserRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User, Integer> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(User.USER, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User.class, configuration);
    }

    @Override
    public Integer getId(io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(User.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchById(Integer... values) {
        return fetch(User.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User fetchOneById(Integer value) {
        return fetchOne(User.USER.ID, value);
    }

    /**
     * Fetch records that have <code>account BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchRangeOfAccount(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(User.USER.ACCOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchByAccount(Long... values) {
        return fetch(User.USER.ACCOUNT, values);
    }

    /**
     * Fetch a unique record that has <code>account = value</code>
     */
    public io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User fetchOneByAccount(Long value) {
        return fetchOne(User.USER.ACCOUNT, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchByName(String... values) {
        return fetch(User.USER.NAME, values);
    }

    /**
     * Fetch records that have <code>student_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchRangeOfStudentId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(User.USER.STUDENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_id IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchByStudentId(Integer... values) {
        return fetch(User.USER.STUDENT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>student_id = value</code>
     */
    public io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User fetchOneByStudentId(Integer value) {
        return fetchOne(User.USER.STUDENT_ID, value);
    }

    /**
     * Fetch records that have <code>last_active BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchRangeOfLastActive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.LAST_ACTIVE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_active IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchByLastActive(LocalDateTime... values) {
        return fetch(User.USER.LAST_ACTIVE, values);
    }

    /**
     * Fetch records that have <code>join_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchRangeOfJoinTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.JOIN_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>join_time IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchByJoinTime(LocalDateTime... values) {
        return fetch(User.USER.JOIN_TIME, values);
    }

    /**
     * Fetch records that have <code>enable BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchRangeOfEnable(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(User.USER.ENABLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enable IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchByEnable(Byte... values) {
        return fetch(User.USER.ENABLE, values);
    }

    /**
     * Fetch records that have <code>bot BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchRangeOfBot(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(User.USER.BOT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bot IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.User> fetchByBot(Long... values) {
        return fetch(User.USER.BOT, values);
    }
}
