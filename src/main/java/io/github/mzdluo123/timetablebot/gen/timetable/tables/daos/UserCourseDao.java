/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables.daos;


import io.github.mzdluo123.timetablebot.gen.timetable.tables.UserCourse;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.UserCourseRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserCourseDao extends DAOImpl<UserCourseRecord, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse, Integer> {

    /**
     * Create a new UserCourseDao without any configuration
     */
    public UserCourseDao() {
        super(UserCourse.USER_COURSE, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse.class);
    }

    /**
     * Create a new UserCourseDao with an attached configuration
     */
    public UserCourseDao(Configuration configuration) {
        super(UserCourse.USER_COURSE, io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse.class, configuration);
    }

    @Override
    public Integer getId(io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserCourse.USER_COURSE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse> fetchById(Integer... values) {
        return fetch(UserCourse.USER_COURSE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse fetchOneById(Integer value) {
        return fetchOne(UserCourse.USER_COURSE.ID, value);
    }

    /**
     * Fetch records that have <code>user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse> fetchRangeOfUser(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserCourse.USER_COURSE.USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse> fetchByUser(Integer... values) {
        return fetch(UserCourse.USER_COURSE.USER, values);
    }

    /**
     * Fetch records that have <code>course BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse> fetchRangeOfCourse(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserCourse.USER_COURSE.COURSE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>course IN (values)</code>
     */
    public List<io.github.mzdluo123.timetablebot.gen.timetable.tables.pojos.UserCourse> fetchByCourse(Integer... values) {
        return fetch(UserCourse.USER_COURSE.COURSE, values);
    }
}
