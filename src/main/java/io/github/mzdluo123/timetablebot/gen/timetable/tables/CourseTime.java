/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables;


import io.github.mzdluo123.timetablebot.gen.timetable.Indexes;
import io.github.mzdluo123.timetablebot.gen.timetable.Keys;
import io.github.mzdluo123.timetablebot.gen.timetable.Timetable;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.CourseTimeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CourseTime extends TableImpl<CourseTimeRecord> {

    private static final long serialVersionUID = 1602906601;

    /**
     * The reference instance of <code>timetable.course_time</code>
     */
    public static final CourseTime COURSE_TIME = new CourseTime();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CourseTimeRecord> getRecordType() {
        return CourseTimeRecord.class;
    }

    /**
     * The column <code>timetable.course_time.id</code>.
     */
    public final TableField<CourseTimeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>timetable.course_time.course</code>. 课程id
     */
    public final TableField<CourseTimeRecord, Integer> COURSE = createField(DSL.name("course"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "课程id");

    /**
     * The column <code>timetable.course_time.class_room</code>. 教室id
     */
    public final TableField<CourseTimeRecord, Integer> CLASS_ROOM = createField(DSL.name("class_room"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "教室id");

    /**
     * The column <code>timetable.course_time.day_of_week</code>. 一周的第几天
     */
    public final TableField<CourseTimeRecord, Byte> DAY_OF_WEEK = createField(DSL.name("day_of_week"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "一周的第几天");

    /**
     * The column <code>timetable.course_time.week</code>. 第几周
     */
    public final TableField<CourseTimeRecord, Byte> WEEK = createField(DSL.name("week"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "第几周");

    /**
     * The column <code>timetable.course_time.start_time</code>. 开始时间段
     */
    public final TableField<CourseTimeRecord, Byte> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "开始时间段");

    /**
     * The column <code>timetable.course_time.length</code>. 持续时间段
     */
    public final TableField<CourseTimeRecord, Byte> LENGTH = createField(DSL.name("length"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "持续时间段");

    /**
     * Create a <code>timetable.course_time</code> table reference
     */
    public CourseTime() {
        this(DSL.name("course_time"), null);
    }

    /**
     * Create an aliased <code>timetable.course_time</code> table reference
     */
    public CourseTime(String alias) {
        this(DSL.name(alias), COURSE_TIME);
    }

    /**
     * Create an aliased <code>timetable.course_time</code> table reference
     */
    public CourseTime(Name alias) {
        this(alias, COURSE_TIME);
    }

    private CourseTime(Name alias, Table<CourseTimeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CourseTime(Name alias, Table<CourseTimeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CourseTime(Table<O> child, ForeignKey<O, CourseTimeRecord> key) {
        super(child, key, COURSE_TIME);
    }

    @Override
    public Schema getSchema() {
        return Timetable.TIMETABLE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COURSE_TIME_COURSETIME_COURSE, Indexes.COURSE_TIME_COURSETIME_DAY_OF_WEEK, Indexes.COURSE_TIME_COURSETIME_START_TIME, Indexes.COURSE_TIME_COURSETIME_WEEK);
    }

    @Override
    public Identity<CourseTimeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COURSE_TIME;
    }

    @Override
    public UniqueKey<CourseTimeRecord> getPrimaryKey() {
        return Keys.KEY_COURSE_TIME_PRIMARY;
    }

    @Override
    public List<UniqueKey<CourseTimeRecord>> getKeys() {
        return Arrays.<UniqueKey<CourseTimeRecord>>asList(Keys.KEY_COURSE_TIME_PRIMARY);
    }

    @Override
    public List<ForeignKey<CourseTimeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CourseTimeRecord, ?>>asList(Keys.FK_COURSETIME_COURSE_ID, Keys.FK_COURSETIME_CLASS_ROOM_ID);
    }

    public Course course() {
        return new Course(this, Keys.FK_COURSETIME_COURSE_ID);
    }

    public Classroom classroom() {
        return new Classroom(this, Keys.FK_COURSETIME_CLASS_ROOM_ID);
    }

    @Override
    public CourseTime as(String alias) {
        return new CourseTime(DSL.name(alias), this);
    }

    @Override
    public CourseTime as(Name alias) {
        return new CourseTime(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CourseTime rename(String name) {
        return new CourseTime(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CourseTime rename(Name name) {
        return new CourseTime(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, Byte, Byte, Byte, Byte> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
