/*
 * This file is generated by jOOQ.
 */
package io.github.mzdluo123.timetablebot.gen.timetable.tables;


import io.github.mzdluo123.timetablebot.gen.timetable.Keys;
import io.github.mzdluo123.timetablebot.gen.timetable.Timetable;
import io.github.mzdluo123.timetablebot.gen.timetable.tables.records.ProfileRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Profile extends TableImpl<ProfileRecord> {

    private static final long serialVersionUID = 1480708030;

    /**
     * The reference instance of <code>timetable.profile</code>
     */
    public static final Profile PROFILE = new Profile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfileRecord> getRecordType() {
        return ProfileRecord.class;
    }

    /**
     * The column <code>timetable.profile.id</code>.
     */
    public final TableField<ProfileRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>timetable.profile.user</code>.
     */
    public final TableField<ProfileRecord, Integer> USER = createField(DSL.name("user"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>timetable.profile.extra</code>. json存储的用户额外信息
     */
    public final TableField<ProfileRecord, String> EXTRA = createField(DSL.name("extra"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "json存储的用户额外信息");

    /**
     * Create a <code>timetable.profile</code> table reference
     */
    public Profile() {
        this(DSL.name("profile"), null);
    }

    /**
     * Create an aliased <code>timetable.profile</code> table reference
     */
    public Profile(String alias) {
        this(DSL.name(alias), PROFILE);
    }

    /**
     * Create an aliased <code>timetable.profile</code> table reference
     */
    public Profile(Name alias) {
        this(alias, PROFILE);
    }

    private Profile(Name alias, Table<ProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private Profile(Name alias, Table<ProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Profile(Table<O> child, ForeignKey<O, ProfileRecord> key) {
        super(child, key, PROFILE);
    }

    @Override
    public Schema getSchema() {
        return Timetable.TIMETABLE;
    }

    @Override
    public Identity<ProfileRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROFILE;
    }

    @Override
    public UniqueKey<ProfileRecord> getPrimaryKey() {
        return Keys.KEY_PROFILE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProfileRecord>> getKeys() {
        return Arrays.<UniqueKey<ProfileRecord>>asList(Keys.KEY_PROFILE_PRIMARY);
    }

    @Override
    public List<ForeignKey<ProfileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProfileRecord, ?>>asList(Keys.FK_PROFILE_USER);
    }

    public User user() {
        return new User(this, Keys.FK_PROFILE_USER);
    }

    @Override
    public Profile as(String alias) {
        return new Profile(DSL.name(alias), this);
    }

    @Override
    public Profile as(Name alias) {
        return new Profile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Profile rename(String name) {
        return new Profile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Profile rename(Name name) {
        return new Profile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
